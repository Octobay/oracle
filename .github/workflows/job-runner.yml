name: Oracle Job Runner
on:
  issues:
    types: [ opened ]

env:
  username: ${{ github.event.issue.user.login }}
  userId: ${{ github.event.issue.user.node_id }}
  issueNumber: ${{ github.event.issue.number }}
  request: ${{ github.event.issue.body }}
  oracleAddress: '0xA56d9e73f98212e56A2eFb00c9F47d1da64937ee'

jobs:
  
  ##### COMMON FOR ALL JOBS:

  # First we get the configuration (currently just the address) of the user that made the request.
  # So that we can check whether the payment transaction was made by this user.
  user-config:
    name: Get User Config
    runs-on: ubuntu-latest
    outputs:
      address: ${{ steps.user-config.outputs.address }}
    steps:
      - name: Get Config for ${{ env.username }}
        uses: octobay/get-user-config-action@v1
        id: user-config
        with:
          username: ${{ env.username }}
          access-token: ${{ secrets.GITHUB_TOKEN }}
  
  # We let them know we are on it.
  comment_processing:
    name: Commenting on Issue (Processing...)
    runs-on: ubuntu-latest
    steps:
      - name: Create comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ env.issueNumber }}
          body: "Processing your request: [show job run](https://github.com/octobay/oracle/actions/runs/${{ github.run_id }})"

  # And we parse the actual request (issue body) to get the tx ID of the oracle payment, the consumer contract and the function we need to send the result to.
  parse-request:
    runs-on: ubuntu-latest
    needs: [ comment_processing ]
    outputs:
      tx: ${{ steps.parse.outputs.tx }}
      consumer: ${{ steps.parse.outputs.consumer }}
      function: ${{ steps.parse.outputs.function }}
      params: ${{ steps.parse.outputs.params }}
    steps:
      - id: parse
        run: |
          REQUEST="${{ env.request }}"
          REGEXP="^(0x[a-fA-F0-9]+):(0x[a-fA-F0-9]{40}):([a-zA-Z]+)\(([a-z0-9,]+)\)$"
          [[ $REQUEST =~ $REGEXP ]] && REQUEST_TX=${BASH_REMATCH[1]} && REQUEST_CONSUMER=${BASH_REMATCH[2]} && REQUEST_FUNCTION=${BASH_REMATCH[3]} && REQUEST_PARAMS=${BASH_REMATCH[4]}
          echo "::set-output name=tx::$REQUEST_TX"
          echo "::set-output name=consumer::$REQUEST_CONSUMER"
          echo "::set-output name=function::$REQUEST_FUNCTION"
          echo "::set-output name=params::$REQUEST_PARAMS"
          echo "Tx: $REQUEST_TX"
          echo "Consumer: $REQUEST_CONSUMER"
          echo "Function: $REQUEST_FUNCTION"
          echo "Params: $REQUEST_PARAMS"

  # Fetch the payment transaction, so we can verify it.
  verify-payment:
    name: Verify Payment Transaction
    runs-on: ubuntu-latest
    needs: [ parse-request, user-config ]
    outputs:
      valid: ${{ steps.verify.outputs.valid }}
      used: ${{ steps.used.outputs.used }}
    steps:
      - name: Fetch Transaction
        uses: octobay/eth-get-tx-action@v1
        id: get-tx
        with:
          rpc-node: ${{ secrets.RPC_NODE }}
          tx-hash: ${{ needs.parse-request.outputs.tx }}
      - name: Verify Transaction
        id: verify
        run: |
          echo "::set-output name=valid::${{ steps.get-tx.outputs.from == needs.user-config.outputs.address && steps.get-tx.outputs.to == env.oracleAddress && steps.get-tx.outputs.value == '1000000000000000' }}"
          echo "From: ${{ steps.get-tx.outputs.from }} (Expected: ${{ needs.user-config.outputs.address }})"
          echo "To: ${{ steps.get-tx.outputs.to }} (Expected: ${{ env.oracleAddress }})"
          echo "Value: ${{ steps.get-tx.outputs.value }} (Expected: 1000000000000000)"
      - name: Checkout Repository
        uses: actions/checkout@v2.3.4
      - name: Check if payment was already used. Store it if not.
        id: used
        # https://github.com/actions/checkout#push-a-commit-using-the-built-in-token
        run: |
          git pull
          if grep -q "${{ needs.parse-request.outputs.tx }}" ./oracle-jobs.log; then
            echo "::set-output name=used::true"
          else
            echo "::set-output name=used::false"
            echo "${{ needs.parse-request.outputs.tx }}" >> ./oracle-jobs.log
            git config --global user.name github-actions
            git config --global user.email github-actions@github.com
            git add ./oracle-jobs.log
            git commit -m "job fulfilled: ${{ needs.parse-request.outputs.tx }}"
            git push
          fi

  ##### FETCH DATA SPECIFIC TO THE REQUESTED JOB:
  
  # Fetch current ETH/USD price.
  ethusd:
    runs-on: ubuntu-latest
    needs: [ verify-payment ]
    if: ${{ startsWith(github.event.issue.title, '[ETHUSD]' ) }}
    outputs:
      int: ${{ steps.ethusd.outputs.int }}
    steps:
      - name: Get ETH/USD Price Feed
        uses: octobay/ethusd-pricefeed-action@v1.1
        id: ethusd
        with:
          rpc-node: ${{ secrets.RPC_NODE_MAINNET }}
  
  # And now we can prepare the function call.
  prepare-transaction:
    name: Preparing Fulfillment Transaction
    runs-on: ubuntu-latest
    needs: [ parse-request, verify-payment, ethusd ]
    outputs:
      data: ${{ steps.encode.outputs.data }}
    steps:
      - name: Encode function call
        uses: octobay/eth-encode-function-call-action@v1
        id: encode
        with:
          name: ${{ needs.parse-request.outputs.function }}
          parameters: ${{ needs.parse-request.outputs.params }}
          values: '${{ needs.ethusd.outputs.int }}'
  
  ##### COMMON FOR ALL JOBS:
  
  # Then we broadcast it.
  send-transaction:
    name: Send Transaction
    runs-on: ubuntu-latest
    needs: [ user-config, parse-request, prepare-transaction, verify-payment ]
    if: ${{ needs.verify-payment.outputs.valid == 'true' }}
    steps:
      - name: "Fulfilling Oracle Request for: ${{ needs.parse-request.outputs.consumer }}"
        uses: octobay/ethtx-action@v1
        with:
          rpc-node: ${{ secrets.RPC_NODE }}
          seed-phrase: ${{ secrets.SEED_PHRASE }}
          from: ${{ secrets.ORACLE_ADDRESS }}
          to: ${{ needs.parse-request.outputs.consumer }}
          data: ${{ needs.prepare-transaction.outputs.data }}
  
  # Now comment on the issue and close it.
  comment-and-close:
    name: Comment on Issue and close
    runs-on: ubuntu-latest
    needs: [ send-transaction ]
    steps:
      - name: Close Issue
        uses: peter-evans/close-issue@v1
        with:
          issue-number: ${{ env.issueNumber }}
          comment: "Done! Request fulfilled for ${{ needs.parse-request.outputs.consumer }}"
  
  comment_failed_no_payment:
    name: "Commenting on Issue (Failed: No payment)"
    runs-on: ubuntu-latest
    needs: [ verify-payment ]
    if: ${{ needs.verify-payment.outputs.valid == 'false' }}
    steps:
      - name: Create comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ env.issueNumber }}
          body: "Processing failed: No payment found! ([show job run](https://github.com/octobay/oracle/actions/runs/${{ github.run_id }}))"

  comment_failed_payment_used:
    name: "Commenting on Issue (Failed: Payment already used)"
    runs-on: ubuntu-latest
    needs: [ verify-payment ]
    if: ${{ needs.verify-payment.outputs.used == 'true' }}
    steps:
      - name: Create comment and close Issue
        uses: peter-evans/close-issue@v1
        with:
          issue-number: ${{ env.issueNumber }}
          comment: "Processing failed: Payment already used! ([show job run](https://github.com/octobay/oracle/actions/runs/${{ github.run_id }}))"
